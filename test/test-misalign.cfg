process TEST = {

  // -- Load default module/services configurations -- //

  // Message logger service
  include "FWCore/MessageService/data/MessageLogger.cfi"
  replace MessageLogger.cout.default.limit = 100000

  // Ideal DT & CSC geometry 
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"


  // -- Specific configurations -- //

  // Empty event source
  source = EmptySource 
  { 
	untracked int32 maxEvents = 1 
  }

  // Database output service
  service = PoolDBOutputService
  {
	string connect = "sqlite_file:Alignments.db"    
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 1
	untracked string catalog = "file:condbcatalog.xml"
	VPSet toPut = {
	  { 
		untracked string containerName = "dtAlignments" 
		string tag = "DTAlignments" 
	  },
	  { 
		untracked string containerName = "dtAlignmentErrors" 
		string tag = "DTAlignmentErrors" 
	  },
	  { 
		untracked string containerName = "cscAlignments" 
		string tag = "CSCAlignments" 
	  },
	  { 
		untracked string containerName = "cscAlignmentErrors" 
		string tag = "CSCAlignmentErrors" 
	  }
	}
  }


  // Misalignment example scenario producer
  include "Alignment/MuonAlignment/data/MuonSurveyOnlyScenario.cff"
  replace MisalignedMuon.saveToDbase = true
  replace MisalignedMuon.dumpBefore  = true
  replace MisalignedMuon.dumpAfter   = true

  // Test module
  module prod =  TestMisalign { untracked string fileName = "misaligned.root" }
  
  path p1 = { prod }      
  
  module print = AsciiOutputModule {}

  endpath ep = { print }

}
