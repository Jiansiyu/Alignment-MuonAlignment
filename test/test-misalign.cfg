process TEST = {

  // -- Load default module/services configurations -- //

  // Message logger service
  // include "FWCore/MessageService/data/MessageLogger.cfi"
  // replace MessageLogger.cout =  {      
  //       untracked string threshold = "INFO"    
  //      untracked PSet default = { untracked int32 limit = 10000000 }  
  //  }

  // Ideal DT & CSC geometry 
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"

  // -- Specific configurations -- //

  // Empty event source
  untracked PSet maxEvents = { untracked int32 input = 1 }
  source = EmptySource { }

  // Database output service
  include "CondCore/DBCommon/data/CondDBSetup.cfi"

  service = PoolDBOutputService {
    using CondDBSetup
    string connect = "sqlite_file:Alignments.db"    
    VPSet toPut = {

           { string record = "DTAlignmentRcd"       string tag = "DT100InversepbScenario" },
           { string record = "DTAlignmentErrorRcd"  string tag = "DT100InversepbScenarioErrors" },
           { string record = "CSCAlignmentRcd"      string tag = "CSC100InversepbScenario" },
           { string record = "CSCAlignmentErrorRcd" string tag = "CSC100InversepbScenarioErrors" }
    }

  }

  // Misalignment example scenario producer
  include "Alignment/MuonAlignment/data/MisalignedMuon.cfi"

  replace MisalignedMuon.saveToDbase = true

  // Test module
  module prod =  TestMisalign { untracked string fileName = "misaligment.root" }
  
  path p1 = { prod }      
  

}
