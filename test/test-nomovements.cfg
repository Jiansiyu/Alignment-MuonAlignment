process TEST = {

  // -- Load default module/services configurations -- //


  // Message logger service
  include "FWCore/MessageService/data/MessageLogger.cfi"
  replace MessageLogger.cout.default.limit = 100000


  // Geometry
  include "Geometry/CMSCommonData/data/cmsRecoIdealGeometryXML.cfi"


  // -- Specific configurations -- //


  // Empty event source
  source = EmptySource { untracked int32 maxEvents = 1 }


  // Database output service
  service = PoolDBOutputService
  {
	//string connect = "sqlite_file:Alignments.db"    
	//untracked string catalog = "file:condbcatalog.xml"
        string connect = "oracle://devdb10/CMS_COND_ALIGNMENT"
        untracked string catalog = "relationalcatalog_oracle://devdb10/CMS_COND_GENERAL"
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 1
        untracked uint32 messagelevel = 2
	VPSet toPut = {
	  { untracked string containerName = "dtAlignments" string tag = "DTIdealGeometry" },
	  { untracked string containerName = "dtAlignmentErrors" string tag = "DTIdealGeometryErrors" },
	  { untracked string containerName = "cscAlignments" string tag = "CSCIdealGeometry" },
	  { untracked string containerName = "cscAlignmentErrors" string tag = "CSCIdealGeometryErrors" }
	}
  }


  // Misalignment scenario producer
  include "Alignment/MuonAlignment/data/NoMovementsScenario.cff"
  replace MisalignmentScenarioSettings.saveToDbase = true


  // Test module
  module prod =  TestMisalign { untracked string fileName = "misaligned.root" }
  
  path p1 = { prod }      
  
  module print = AsciiOutputModule {}

  endpath ep = { print }

}
